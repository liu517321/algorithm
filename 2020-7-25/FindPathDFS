import java.util.ArrayList; 

/** 
public class TreeNode { 
	int val = 0; 
	TreeNode left = null; 
	TreeNode right = null; 
	public TreeNode(int val) { 
		this.val = val; 
	} 
}
*/
public class Solution { 
	//基于DFS的回溯算法 
	public void FindPathDFS(TreeNode root,int target, ArrayList<ArrayList<Integer>> result,ArrayList<Integer> list){ 
		if(root == null){ 
			return;
		}
		//将当前值放入list待选结果集中 list.add(root.val); 
		//更新目标值 
		target -= root.val; 
		//1. 已经是叶子节点了 
		//2. 从root到该叶子节点，之和是target 
		//3. 是叶子节点，但是不满足节点，也不影响，程序会直接退出 
		if(root.left == null && root.right == null && target == 0){ 
			//回溯剪枝，去 掉不满足条件的结果
			result.add(new ArrayList<Integer>(list)); 
			//注意深浅拷贝 
		}
		FindPathDFS(root.left, target, result, list); 
		//DFS递归统计 
		FindPathDFS(root.right, target, result, list); 
		list.remove(list.size()-1); 
	}
	public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) { 
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>(); 
		ArrayList<Integer> list = new ArrayList<>(); 
		FindPathDFS(root, target, result, list); 
		return result; 
	} 
}
